/obj/machinery/shieldgenerator/energy_shield_poddoor
	// icon_state = "energyShieldWall"
	var/id
	MAX_POWER_LEVEL = 2
	MIN_POWER_LEVEL = 1

	var/list/obj/machinery/door/poddoor/doors //list of poddoors to create force fields for when opened

	name = "Energy-Shield Generator"
	desc = "Solid matter can pass through the shields generated by this generator."
	icon = 'icons/obj/meteor_shield.dmi'
	icon_state = "energyShield"

	New()
		..()
		display_active.icon_state = "energyShieldOn"
		src.power_usage = 5
		src.anchored = 1
		src.PCEL = null					//Not sure if we should have it start with a power cell or not. I want it to just use station power for now.
		src.range = 0
		src.connected = 1	//supposed to check if it's over a wire in parent, but we'll fudge it here because these will only be placed from the editor and we don't want to re-wire things to get this working

	examine()
		if(usr.client)
			boutput(usr, "The unit will consume [30 * src.range * (src.power_level * src.power_level)] power a second.")
			boutput(usr, "The unit is emitting [src.range] force fields.")

	//need to override to keep this type of generator anchored
	//not sure if I
	shield_off(var/failed = 0)
		..()
		doors = null
		range = 0
		anchored = 1
		if (failed)
			src.visible_message("The <b>[src.name]</b> fails, and shuts down!")
		playsound(src.loc, src.sound_off, 50, 1)


	shield_on()
		range = max(src.deployed_shields.len, 0) //just in cases
		if (!powered()) //if NOT connected to power grid and there is power
			src.visible_message("<span style=\"color:red\">hit unpowered!</b></span>")
			src.power_usage = 0
			shield_off()
			
		else //no power cell, not connected to grid: power down if active, do nothing otherwise
			src.visible_message("<span style=\"color:red\">hit powered!</b></span>")
			src.power_usage = 30 * (src.range) * (power_level * power_level)
			generate_shield()
			
		return

	//Manual off switch
	attack_hand(mob/user as mob)
		if (src.active)
			src.shield_off()
		return


	// proc/delete_shield_at_location()

		
	//Code for placing the shields and adding them to the generator's shield list
	proc/generate_shield()
		src.visible_message("<span style=\"color:red\">doors = [doors]</b></span>")

		if (doors)
			for (var/obj/machinery/door/poddoor/D in doors)
				src.visible_message("<span style=\"color:red\">current door = [D]!    density = [D.density]!    location = [D.loc] </b></span>")

				//OK, I know what you're thinking, it should be !D.density, except no because door.open() has a spawn that makes it take a while to
				//change the density. And unless I'm going to throw more sleeps/spawns around I'd have to do this.
				if (D.density || D.operating)
					var/obj/forcefield/energyshield/S = new /obj/forcefield/energyshield ( locate((D.x),(D.y),D.z), src , 1 )
					display_active.color = "#0000FA"
					src.deployed_shields += S
				else	//loop through forcefields to find field at current turf and delete it
					for (var/obj/forcefield/energyshield/S in deployed_shields)
						src.visible_message("<span style=\"color:red\">EEEE</b></span>")

						if (D.loc == S.loc)
							src.visible_message("<span style=\"color:red\">Removed shield!!!!!!!!!!!!!</b></span>")
							src.deployed_shields -= S
							S:deployer = null
							qdel(S)

							src.deployed_shields.Remove(S)
							doors -= D
							range--
							continue


		if (src.deployed_shields.len)
			src.active = 1
			playsound(src.loc, src.sound_on, 50, 1)
		else
			src.active = 0
			shield_off()

		
		build_icon()
